h1. Graphics Management

The following functions provide routines for managing the window, including opening the graphics device,
clearing the viewport, and closing the graphics window.

h2. initwindow

*function* **initwindow** (width, height, title, left, top, dbflag, closeflag)

h3. Description

Initializes and opens a window for graphics output.  This routine is the recommended method for opening a graphics output device.

h3. Parameters

|Parameter|Type|Description|
|width|integer|Width of the window|
|height|integer|Height of the window|
|title|character(*)|(optional) Title to display in the titlebar|
|left|integer|(optional) Horizontal screen position of the window|
|top|integer|(optional) Vertical screen position of the window|
|dbflag|logical|(optional) Enable double-buffering|
|closeflag|logical|(optional) Kill program on window close|

h3. Return Value

**integer** 

Unique identifier of the opened window

h2. initgraph

*subroutine* **initgraph** (graphdriver, graphmode, pathtodriver)

h3. Description

Initializes and opens a window for graphics output using the specified driver in the specified mode.  The *graphdriver* must be one of the defined constants:

|DETECT|
|CGA|
|MCGA|
|EGA|
|EGA64|
|EGAMONO|
|IBM8514|
|HERCMONO|
|ATT400|
|VGA|
|PC3270|

With this interface on Windows, the driver constants are mostly used to determine window size.  Users are encouraged to use <a href="#initwindow">**initwindow**</a> instead.

The *graphmode* parameter is present for specifying palletes.  Passing 0 is sufficient.

h3. Parameters

|Parameter|Type|Description|
|graphdriver|integer|The driver to request|
|graphmode|integer|The mode of the specific driver in which to start|
|pathtodriver|character(*)|(optional) Path to driver files (not applicable, compatability only)|

h3. Return Value

Upon success, the value of *graphdriver* will be *grOk*.  The following error codes can be returned in this parameter:

|*graphdriver* Value|Description|
|grOk|Successfully initialized|
|grNotDetected|Could not detect the specified driver|
|grInvalidDriver|The value of *graphdriver* was invalid|
|grNoLoadMem|Insufficient memory to load driver|

h2. closegraph

*subroutine* **closegraph** (window_id)

h3. Description

Closes the specified graphics window or, optionally, all windows.  If *window_id* is not included, this call will close all windows.  The *window_id* parameter should be the window's id as referred to by <a href="#initwindow">**initwindow**</a> or one of the following constants:

|Constant|Description|
|ALL_WINDOWS|All open graphics windows (default)|
|CURRENT_WINDOW|The current window|
|NO_CURRENT_WINDOW|All windows except the current window|

h3. Parameters

|Parameter|Type|Description|
|window_id|integer|(optional) The id of the window to close or, optionally, a constant described above|

h2. detectgraph

*subroutine* **detectgraph** (graphdriver, graphmode)

h3. Description

Originally meant to return the best available graphics driver, this function will always return **VGA** in the *graphdriver* parameter and **VGAHI** in the *graphmode* parameter.  It is present for compatability only.

h3. Parameters

|Parameter|Type|Description|
|graphdriver|integer|The best available driver, always being **VGA** |
|graphmode|integer|The mode of the driver, always being **VGAHI** |

h2. graphdefaults

*subroutine* **graphdefaults** ( )

h3. Description

Return the graphics window to its default settings, including:

* sets the viewport to the entire window
* moves the current position to (0,0)
* sets the default palette colors, background color, and drawing color
* sets the default fill style and pattern
* sets the default text font and justification

h2. graphresult

*function* **graphresult** ( )

h3. Description

Returns the status of the last graphics operation.

h3. Return Value

**integer** 

Ths return code will always be one of the following values:

|Constant|Description|
|grOk|No error|
|grNoInitGraph|(BGI) graphics not installed (use initgraph)|
|grNotDetected|Graphics hardware not detected|
|grFileNotFound|Device driver file not found|
|grInvalidDriver|Invalid device driver file|
|grNoLoadMem|Not enough memory to load driver|
|grNoScanMem|Out of memory in scan fill|
|grNoFloodMem|Out of memory in flood fill|
|grFontNotFound|Font file not found|
|grNoFontMem|Not enough memory to load font|
|grInvalidMode|Invalid graphics mode for selected driver|
|grError|Graphics error|
|grIOerror|Graphics I/O error|
|grInvalidFont|Invalid font file|
|grInvalidFontNum|Invalid font number|
|grInvalidDeviceNum|Invalid device number|
|grInvalidVersion|Invalid version number|

h2. setcurrentwindow

*subroutine* **setcurrentwindow** (window_id)

h3. Description

Selects the window of the specified id to be the current window.  All subsequent graphics operations will be applied to the specified window until it is either closed or another window becomes the current window.

h3. Parameters

|Parameter|Type|Description|
|window_id|integer|The window id|

h2. swapbuffers

*subroutine* **swapbuffers** ( )

h3. Description

For double-buffered graphics, this routine will swap the currently visible graphics with the current in-memory buffer.  It effectively swaps the visual and active pages.

h2. getactivepage

*function* **getactivepage** ( )

h3. Description

Returns the page number of the graphics device where drawing is currently taking place.  If double buffering is enabled, this will not necessarily be the visible page.

h3. Return Value

*integer*

The page that is currently being drawn.

h2. getvisualpage

*function* **getvisualpage** ( )

h3. Description

Returns the page number of the graphics device that is currently displayed on screen.  If double buffering is enabled, this will not necessarily be the active page.

h3. Return Value

*integer*

The page that is currently being shown.

h2. setactivepage

*subroutine* **setactivepage** (page)

h3. Description

Sets the specified page, normally a number returned by either <a href="#getactivepage">**getactivepage**</a> or <a href="#getvisualpage">**getvisualpage**</a>, to the active page for drawing.

h3. Parameters

|Parameter|Type|Description|
|page|integer|The page to act as the active page for drawing|

h2. setvisualpage

*subroutine* **setvisualpage** (page)

h3. Description

Sets the specified page, normally a number returned by either <a href="#getactivepage">**getactivepage**</a> or <a href="#getvisualpage">**getvisualpage**</a>, to the page displayed on screen.

h3. Parameters

|Parameter|Type|Description|
|page|integer|The page to act as the visual page for display|

h2. getaspectratio

*subroutine* **getaspectratio** (xaspect, yaspect)

h3. Description

Retrieves the aspect ratio for the current window.  The values are returned via the two parameters.  The *yaspect* parameter will always be normalized to 10,000, with *xaspect* scaled accordingly.

h3. Parameters

|Parameter|Type|Description|
|xaspect|integer|The screen width of one pixel on the device|
|yaspect|integer|The screen height of one pixel on the device|

h2. setaspectratio

*subroutine* **setaspectratio** (xaspect, yaspect)

h3. Description

Sets the aspect ratio for the current window.  The aspect ratio is used for ensuring shapes are displayed properly.  For example, it is used to ensure circles appear as such rather than elipses.

h3. Parameters

|Parameter|Type|Description|
|xaspect|integer|The screen width of one pixel on the device|
|yaspect|integer|The screen height of one pixel on the device|

h2. getwindowheight

*function* **getwindowheight** ( )

h3. Description

Returns the current height in pixels of the current window.

h3. Return Value

*integer*

The height of the current window.

h2. getwindowheight

*function* **getwindowwidth** ( )

h3. Description

Returns the current width in pixels of the current window.

h3. Return Value

*integer*

The width of the current window.

h2. getwindowheight

*function* **getwindowheight** ( )

h3. Description

Returns the current height in pixels of the current window.

h3. Return Value

*integer*

The height of the current window.

h2. getmaxheight

*function* **getmaxheight** ( )

h3. Description

Returns the largest possible height of a window such that it will fit on screen.

h3. Return Value

*integer*

The largest height of a window possible.

h2. getmaxwidth

*function* **getmaxwidth** ( )

h3. Description

Returns the largest possible width of a window such that it will fit on screen.

h3. Return Value

*integer*

The largest width of a window possible.

h2. getmaxx

*function* **getmaxx** ( )

h3. Description

Returns the largest possible x position within the current window.

h3. Return Value

*integer*

The largest horizontal position possible in the current window.

h2. getmaxy

*function* **getmaxy** ( )

h3. Description

Returns the largest possible y position within the current window.

h3. Return Value

*integer*

The largest vertical position possible in the current window.
